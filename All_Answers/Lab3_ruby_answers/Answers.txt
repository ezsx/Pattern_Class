a. pg gem отвечает за работу с PostgreSQL в Ruby.
Работа выполняется путем установления соединения с базой данных PostgreSQL
и выполнения запросов и других операций с использованием этого соединения.
Вы можете использовать класс PG::Connection из pg gem для создания подключений и управления ими.

b. Объект указанного класса (PG::Connection) возвращает результат запроса SQL SELECT
 в виде объекта PG::Result. Этот объект содержит строки результата в структуре, подобной массиву,
 и вы можете получить доступ к данным, выполнив итерацию по строкам и столбцам, используя индексы
 или имена столбцов.

c. В Ruby коллекция хэшей - это структура данных, в которой хранятся
пары ключ-значение. Основными принципами работы с хэшем являются:

Создайте новый хэш, используя синтаксис {} или Hash.new
Храните значения, используя синтаксис hash[key] = value
Извлекайте значения, используя синтаксис hash[key]
Перебирайте ключи и значения, используя метод each
Проверить наличие ключа с помощью has_key? или включить? методы
Удалите ключи и значения, используя метод удаления

d. Коллекция Set - это структура данных, в которой хранятся уникальные элементы
без какого-либо определенного порядка. Основными принципами работы с набором являются:

Создайте новый набор, используя метод Set.new
Добавьте элементы в набор, используя методы add или <<
Удалите элементы из набора с помощью метода delete
Проверить наличие элемента с помощью include? метод
Перебирайте элементы, используя метод each
Выполните операции набора, такие как объединение, пересечение и разность, используя соответствующие методы

e. Шаблон Singleton - это шаблон проектирования, который гарантирует,
что класс имеет только один экземпляр, и он предоставляет глобальную точку доступа
к этому экземпляру. Это полезно, когда вам нужно контролировать доступ к общим ресурсам,
таким как данные конфигурации или пул подключений.

f. Вот пример реализации одноэлементного шаблона в Ruby:

рубин Для копирования кода
требуется 'singleton'

класс MySingleton
включает в себя Singleton

  def инициализировать
    @data = 0
  конец

  def increment_data
    @данные += 1
  конец

  данные определения
    @
конец передачи данных
end

# Проверка корректности реализации Singleton
instance1 = MySingleton.instance
instance2 = MySingleton.instance

помещает instance1 == instance2 # Должен выводить 'true'

instance1.increment_data
помещает instance2.data # Должен выводить '1'

g. Поля и методы класса используются в Ruby для хранения данных и выполнения действий,
которые относятся к классу в целом, а не к конкретному экземпляру класса.
Они могут быть полезны для управления общими ресурсами или предоставления служебных методов,
которые не зависят от состояния отдельного объекта.

h. Метод класса - это метод, который принадлежит самому классу, а не экземпляру класса.
Основное различие между методом класса и методом объекта заключается в том, что
методы класса вызываются в классе, в то время как методы объекта вызываются в экземпляре класса.
Вот два практических примера, когда введение метода класса необходимо в соответствии с концепциями ООП:

Фабричный метод, который создает